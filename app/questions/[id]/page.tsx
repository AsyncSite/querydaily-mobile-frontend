'use client';

import { useState } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';

export default function QuestionPage({ params }: { params: { id: string } }) {
  const router = useRouter();
  const [myAnswer, setMyAnswer] = useState('');
  const [showMyAnswer, setShowMyAnswer] = useState(false);
  const [shared, setShared] = useState(false);
  const [likedAnswers, setLikedAnswers] = useState<number[]>([]);
  const [bookmarked, setBookmarked] = useState(false);
  const [sortBy, setSortBy] = useState<'popular' | 'recent'>('popular');

  const currentId = parseInt(params.id);

  const question = {
    id: params.id,
    number: currentId,
    total: 3,
    title: currentId === 1 ? 'Spring AOPÏùò ÎèôÏûë ÏõêÎ¶¨Î•º ÏÑ§Î™ÖÌïòÏÑ∏Ïöî'
           : currentId === 2 ? 'JPA N+1 Î¨∏Ï†úÏôÄ Ìï¥Í≤∞ Î∞©Î≤ï'
           : 'HTTPÏôÄ HTTPSÏùò Ï∞®Ïù¥',
    description: currentId === 1 ? 'Spring AOPÍ∞Ä ÌîÑÎ°ùÏãú Ìå®ÌÑ¥ÏùÑ Í∏∞Î∞òÏúºÎ°ú Ïñ¥ÎñªÍ≤å ÎèôÏûëÌïòÎäîÏßÄ, ÏúÑÎπô ÏãúÏ†êÏùÄ Ïñ∏Ï†úÏù∏ÏßÄ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.'
                 : currentId === 2 ? 'N+1 Î¨∏Ï†úÍ∞Ä Î∞úÏÉùÌïòÎäî ÏõêÏù∏Í≥º Ìï¥Í≤∞ Î∞©Î≤ïÏùÑ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.'
                 : 'HTTPÏôÄ HTTPSÏùò Ï∞®Ïù¥Ï†êÍ≥º HTTPSÍ∞Ä Î≥¥ÏïàÏùÑ Ï†úÍ≥µÌïòÎäî Î∞©ÏãùÏùÑ ÏÑ§Î™ÖÌï¥Ï£ºÏÑ∏Ïöî.',
    category: currentId === 1 ? 'Spring' : currentId === 2 ? 'JPA' : 'Network',
    difficulty: currentId === 3 ? 'Ï¥àÍ∏â' : 'Ï§ëÍ∏â',
    hint: currentId === 1 ? 'üí° JDK Dynamic ProxyÏôÄ CGLIBÏùò Ï∞®Ïù¥Î•º ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî.'
          : currentId === 2 ? 'üí° FetchTypeÍ≥º Ïó∞Í¥ÄÍ¥ÄÍ≥Ñ Î°úÎî© Ï†ÑÎûµÏùÑ Í≥†Î†§Ìï¥Î≥¥ÏÑ∏Ïöî.'
          : 'üí° SSL/TLS Ïù∏Ï¶ùÏÑúÏôÄ ÏïîÌò∏Ìôî Î∞©ÏãùÏùÑ ÏÉùÍ∞ÅÌï¥Î≥¥ÏÑ∏Ïöî.'
  };

  const answersData = [
    {
      id: 1,
      author: {
        nickname: 'Í∞úÎ∞úÌïòÎäî Í∞êÏûê',
        badges: [
          { type: 'company', label: 'LINE', verified: true, color: 'blue' },
          { type: 'experience', label: '5ÎÖÑÏ∞®', color: 'purple' }
        ]
      },
      content: currentId === 1
        ? 'Spring AOPÎäî ÌîÑÎ°ùÏãú Ìå®ÌÑ¥ÏúºÎ°ú ÎèôÏûëÌï©ÎãàÎã§. Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Í∞Ä ÏûàÏúºÎ©¥ JDK Dynamic Proxy, ÏóÜÏúºÎ©¥ CGLIBÎ•º ÏÇ¨Ïö©Ìï¥Ïöî.\n\nÎü∞ÌÉÄÏûÑÏóê ÏúÑÎπôÏù¥ Ïù¥Î£®Ïñ¥ÏßÄÎ©∞, @AspectÎ°ú Ï†ïÏùòÌïú AdviceÍ∞Ä Ï°∞Ïù∏Ìè¨Ïù∏Ìä∏ÏóêÏÑú Ïã§ÌñâÎê©ÎãàÎã§.\n\nÏ£ºÏùòÌï† Ï†êÏùÄ Í∞ôÏùÄ ÌÅ¥ÎûòÏä§ ÎÇ¥Î∂Ä Î©îÏÑúÎìú Ìò∏Ï∂ú Ïãú ÌîÑÎ°ùÏãúÎ•º Í±∞ÏπòÏßÄ ÏïäÏïÑ AOPÍ∞Ä ÎèôÏûëÌïòÏßÄ ÏïäÎäîÎã§Îäî Í±∞ÏòàÏöî.'
        : currentId === 2
        ? 'N+1 Î¨∏Ï†úÎäî Ïó∞Í¥ÄÍ¥ÄÍ≥Ñ Ï°∞Ìöå Ïãú Í∞Å ÏóîÌã∞Ìã∞ÎßàÎã§ Ï∂îÍ∞Ä ÏøºÎ¶¨Í∞Ä Î∞úÏÉùÌïòÎäî Î¨∏Ï†úÏûÖÎãàÎã§.\n\nFetch JoinÏù¥ÎÇò @EntityGraphÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ Ìïú Î≤àÏùò ÏøºÎ¶¨Î°ú Ìï¥Í≤∞Ìï† Ïàò ÏûàÏñ¥Ïöî.\n\nBatch Size ÏÑ§Ï†ïÎèÑ Ìö®Í≥ºÏ†ÅÏù∏ Î∞©Î≤ï Ï§ë ÌïòÎÇòÏûÖÎãàÎã§.'
        : 'HTTPÎäî ÌèâÎ¨∏ ÌÜµÏã†Ïù¥Í≥†, HTTPSÎäî SSL/TLSÎ°ú ÏïîÌò∏ÌôîÎêú ÌÜµÏã†ÏûÖÎãàÎã§.\n\nHTTPSÎäî Í≥µÍ∞úÌÇ§ ÏïîÌò∏Ìôî Î∞©ÏãùÏúºÎ°ú Îç∞Ïù¥ÌÑ∞Î•º Î≥¥Ìò∏ÌïòÍ≥†, Ïù∏Ï¶ùÏÑúÎ°ú ÏÑúÎ≤ÑÏùò Ïã†ÏõêÏùÑ Î≥¥Ïû•Ìï©ÎãàÎã§.\n\nÌè¨Ìä∏ÎèÑ Îã§Î¶ÖÎãàÎã§. HTTPÎäî 80, HTTPSÎäî 443ÏùÑ ÏÇ¨Ïö©Ìï¥Ïöî.',
      likes: 127,
      timeAgo: '2ÏãúÍ∞Ñ Ï†Ñ',
      timestamp: Date.now() - 2 * 60 * 60 * 1000
    },
    {
      id: 2,
      author: {
        nickname: 'ÏΩîÎî©ÌïòÎäî Ìò∏ÎûëÏù¥',
        badges: [
          { type: 'experience', label: '5ÎÖÑÏ∞® Î∞±ÏóîÎìú', color: 'purple' },
          { type: 'activity', label: 'Î≤†Ïä§Ìä∏ ÎãµÎ≥Ä 12Ìöå', color: 'orange' }
        ]
      },
      content: currentId === 1
        ? 'Î©¥Ï†ëÏóêÏÑú Ïã§Ï†úÎ°ú "Í∞ôÏùÄ ÌÅ¥ÎûòÏä§ ÎÇ¥Î∂Ä Ìò∏Ï∂ú Ïãú Ïôú AOPÍ∞Ä Ïïà ÎêòÎäîÏßÄ" Î¨ºÏñ¥Î¥§Ïñ¥Ïöî.\n\nÌîÑÎ°ùÏãúÎ•º Í±∞ÏπòÏßÄ ÏïäÍ∏∞ ÎïåÎ¨∏Ïù¥ÎùºÍ≥† ÎãµÌñàÍ≥†, Ïù¥ Í≤ΩÏö∞ self-injectionÏù¥ÎÇò Î¶¨Ìå©ÌÜ†ÎßÅÏúºÎ°ú Ìï¥Í≤∞Ìï† Ïàò ÏûàÎã§Í≥† Ï∂îÍ∞Ä ÏÑ§Î™ÖÌñàÏäµÎãàÎã§!'
        : currentId === 2
        ? 'Ïã§Î¨¥ÏóêÏÑú Í∞ÄÏû• ÎßéÏù¥ Ïì∞Îäî Í±¥ Fetch JoinÏù¥ÏóêÏöî.\n\nÎã§Îßå ÌéòÏù¥Ïßï Ï≤òÎ¶¨ Ïãú Î©îÎ™®Î¶¨ÏóêÏÑú ÌéòÏù¥ÏßïÏù¥ ÎêòÎäî Î¨∏Ï†úÍ∞Ä ÏûàÏúºÎãà Ï£ºÏùòÌï¥Ïïº Ìï©ÎãàÎã§.\n\nÏù¥Îü¥ ÎïåÎäî @BatchSizeÎ•º ÏÇ¨Ïö©ÌïòÎäî Í≤å Îçî ÎÇòÏùÑ Ïàò ÏûàÏñ¥Ïöî.'
        : 'HTTPSÎäî ÎåÄÏπ≠ÌÇ§ÏôÄ Í≥µÍ∞úÌÇ§ ÏïîÌò∏ÌôîÎ•º Î™®Îëê ÏÇ¨Ïö©Ìï©ÎãàÎã§.\n\nÌï∏ÎìúÏÖ∞Ïù¥ÌÅ¨ Í≥ºÏ†ïÏóêÏÑú Í≥µÍ∞úÌÇ§Î°ú ÎåÄÏπ≠ÌÇ§Î•º ÍµêÌôòÌïòÍ≥†, Ïã§Ï†ú Îç∞Ïù¥ÌÑ∞Îäî ÎåÄÏπ≠ÌÇ§Î°ú ÏïîÌò∏ÌôîÌï¥Ïöî.\n\nÏù¥Î†áÍ≤å ÌïòÎ©¥ ÏÜçÎèÑÏôÄ Î≥¥ÏïàÏùÑ Î™®Îëê Ïû°ÏùÑ Ïàò ÏûàÏäµÎãàÎã§.',
      likes: 89,
      timeAgo: '1Ïùº Ï†Ñ',
      timestamp: Date.now() - 24 * 60 * 60 * 1000
    },
    {
      id: 3,
      author: {
        nickname: 'Ïä§ÌîÑÎßÅ ÎßàÏä§ÌÑ∞',
        badges: [
          { type: 'tech', label: 'Spring Ï†ÑÎ¨∏Í∞Ä', color: 'green' },
          { type: 'company', label: 'Ïö∞ÏïÑÌïúÌòïÏ†úÎì§', verified: true, color: 'blue' }
        ]
      },
      content: currentId === 1
        ? 'Ïã§Î¨¥ Í≤ΩÌóòÏÉÅ AOPÎäî Ìä∏ÎûúÏû≠ÏÖò, Î°úÍπÖ, Î≥¥Ïïà Îì±Ïóê ÎßéÏù¥ ÏÇ¨Ïö©Îê©ÎãàÎã§.\n\nÌäπÌûà @TransactionalÎèÑ AOPÎ°ú Íµ¨ÌòÑÎêòÏñ¥ ÏûàÏ£†.\n\nÏÑ±Îä•Ïóê ÎØ∏ÏπòÎäî ÏòÅÌñ•ÏùÄ ÌÅ¨ÏßÄ ÏïäÏßÄÎßå, ÌîÑÎ°ùÏãú ÏÉùÏÑ± ÎπÑÏö©ÏùÄ Í≥†Î†§Ìï¥Ïïº Ìï©ÎãàÎã§.'
        : currentId === 2
        ? '@BatchSizeÎäî IN ÏøºÎ¶¨Î°ú ÌïúÎ≤àÏóê Ïó¨Îü¨ Í∞úÎ•º Ï°∞ÌöåÌï¥ÏÑú ÏøºÎ¶¨ ÏàòÎ•º Ï§ÑÏó¨Ï§çÎãàÎã§.\n\nFetch JoinÎ≥¥Îã§ Ïú†Ïó∞ÌïòÍ≥†, ÌéòÏù¥ÏßïÍ≥ºÎèÑ Í∞ôÏù¥ Ïì∏ Ïàò ÏûàÏñ¥Ïöî.'
        : 'Ï§ëÏöîÌïú Í±¥ HTTPSÍ∞Ä ÏôÑÎ≤ΩÌïú Î≥¥ÏïàÏùÑ Î≥¥Ïû•ÌïòÏßÄÎäî ÏïäÎäîÎã§Îäî Ï†êÏù¥ÏóêÏöî.\n\nÏ§ëÍ∞ÑÏûê Í≥µÍ≤©ÏùÑ Î∞©ÏßÄÌïòÏßÄÎßå, ÏÑúÎ≤Ñ ÏûêÏ≤¥Í∞Ä Ìï¥ÌÇπÎêòÎ©¥ ÏÜåÏö©ÏóÜÏ£†.',
      likes: 64,
      timeAgo: '3Ïùº Ï†Ñ',
      timestamp: Date.now() - 3 * 24 * 60 * 60 * 1000
    },
    {
      id: 4,
      author: {
        nickname: 'Î∞±ÏóîÎìú ÏßÄÎßùÏÉù',
        badges: [
          { type: 'learner', label: 'Ï§ÄÎπÑ Ï§ë', color: 'gray' },
          { type: 'activity', label: 'ÎèÑÏõÄÎèºÏöî 45+', color: 'orange' }
        ]
      },
      content: currentId === 1
        ? 'CGLIBÎäî ÌÅ¥ÎûòÏä§ ÏÉÅÏÜç Î∞©ÏãùÏù¥Îùº final ÌÅ¥ÎûòÏä§ÎÇò Î©îÏÑúÎìúÏóêÎäî Ï†ÅÏö©Ìï† Ïàò ÏóÜÏñ¥Ïöî.\n\nÏù¥Îü∞ Ï†úÏïΩÏÇ¨Ìï≠ÎèÑ Î©¥Ï†ëÏóêÏÑú Î¨ºÏñ¥Î≥º Ïàò ÏûàÏúºÎãà ÏïåÏïÑÎëêÎ©¥ Ï¢ãÏäµÎãàÎã§.'
        : currentId === 2
        ? 'Ïã§Î¨¥ ÌåÅ: ÏßÄÏó∞ Î°úÎî©ÏùÑ Í∏∞Î≥∏ÏúºÎ°ú ÌïòÍ≥†, ÌïÑÏöîÌïú Í≤ΩÏö∞ÏóêÎßå Fetch JoinÏùÑ Ïì∞ÏÑ∏Ïöî.\n\nÍ∑∏Î¶¨Í≥† Ìï≠ÏÉÅ ÏøºÎ¶¨ Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÎäî ÏäµÍ¥ÄÏùÑ Îì§Ïù¥ÏÑ∏Ïöî.'
        : 'Î©¥Ï†ëÏóêÏÑú "ÎåÄÏπ≠ÌÇ§ÏôÄ Í≥µÍ∞úÌÇ§Î•º Ïôú Îëò Îã§ Ïì∞ÎäîÏßÄ" Î¨ºÏñ¥Î≥¥Îäî Í≤ΩÏö∞Í∞Ä ÎßéÏïÑÏöî.\n\nÍ≥µÍ∞úÌÇ§Îäî ÎäêÎ¶¨ÏßÄÎßå ÏïàÏ†ÑÌïòÍ≥†, ÎåÄÏπ≠ÌÇ§Îäî Îπ†Î•¥ÏßÄÎßå ÌÇ§ ÍµêÌôòÏù¥ Î¨∏Ï†úÎùºÏÑú ÎëòÏùÑ Ï°∞Ìï©ÌïòÎäî Í±∞Ï£†.',
      likes: 52,
      timeAgo: '5Ïùº Ï†Ñ',
      timestamp: Date.now() - 5 * 24 * 60 * 60 * 1000
    }
  ];

  const othersAnswers = [...answersData].sort((a, b) => {
    if (sortBy === 'popular') {
      return b.likes - a.likes;
    } else {
      return b.timestamp - a.timestamp;
    }
  });

  const handleShare = () => {
    setShared(true);
  };

  const toggleLike = (answerId: number) => {
    setLikedAnswers(prev =>
      prev.includes(answerId)
        ? prev.filter(id => id !== answerId)
        : [...prev, answerId]
    );
  };

  const nextId = currentId < 3 ? currentId + 1 : null;
  const prevId = currentId > 1 ? currentId - 1 : null;

  const handleNext = () => {
    if (nextId) {
      router.push(`/prototype11/questions/${nextId}`);
    } else {
      router.push('/prototype11/dashboard');
    }
  };

  const handlePrev = () => {
    if (prevId) {
      router.push(`/prototype11/questions/${prevId}`);
    }
  };

  return (
    <div className="px-6 py-8 space-y-6">
        {/* Header */}
        <div className="flex items-center justify-between">
          <Link href="/prototype11/dashboard" className="text-gray-500">
            ‚Üê Îí§Î°ú
          </Link>
          <div className="flex items-center gap-4">
            <button
              onClick={() => setBookmarked(!bookmarked)}
              className="text-2xl transition-transform hover:scale-110"
            >
              {bookmarked ? '‚≠êÔ∏è' : '‚òÜ'}
            </button>
            <span className="text-sm font-medium text-gray-500">
              {question.number}/3
            </span>
          </div>
        </div>

        {/* Question */}
        <div className="bg-white rounded-2xl p-6 shadow-md border border-gray-200">
          <div className="flex gap-2 mb-4">
            <span className="px-2 py-1 bg-indigo-50 text-indigo-600 text-xs rounded-full">
              {question.category}
            </span>
            <span className="px-2 py-1 bg-orange-50 text-orange-600 text-xs rounded-full">
              {question.difficulty}
            </span>
          </div>

          <h2 className="text-xl font-bold text-gray-900 mb-3">
            {question.title}
          </h2>
          <p className="text-sm text-gray-600 leading-relaxed">
            {question.description}
          </p>

          <div className="mt-4 pt-4 border-t border-gray-100">
            <p className="text-sm text-gray-500">
              {question.hint}
            </p>
          </div>
        </div>

        {/* Others' Answers Header */}
        <div>
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center gap-2">
              <span className="text-xl">üëÄ</span>
              <span className="font-semibold text-gray-900">ÌòÑÏßÅÏûê ÎãµÎ≥Ä</span>
            </div>
            <div className="flex items-center gap-2 text-xs text-gray-500">
              <div className="w-1.5 h-1.5 bg-emerald-500 rounded-full animate-pulse"></div>
              <span>8Î™Ö Î≥¥Îäî Ï§ë</span>
            </div>
          </div>

          {/* Contributor Badges Preview */}
          <div className="flex flex-wrap gap-2 mb-6">
            {othersAnswers.map((answer) => {
              const primaryBadge = answer.author.badges[0];
              return (
                <div
                  key={answer.id}
                  className={`px-2.5 py-1 text-xs font-medium rounded-full flex items-center gap-1 ${
                    primaryBadge.color === 'blue'
                      ? 'bg-blue-50 text-blue-700 border border-blue-200'
                      : primaryBadge.color === 'purple'
                      ? 'bg-purple-50 text-purple-700 border border-purple-200'
                      : primaryBadge.color === 'green'
                      ? 'bg-green-50 text-green-700 border border-green-200'
                      : primaryBadge.color === 'orange'
                      ? 'bg-orange-50 text-orange-700 border border-orange-200'
                      : 'bg-gray-50 text-gray-700 border border-gray-200'
                  }`}
                >
                  {primaryBadge.verified && <span className="text-blue-600">‚úì</span>}
                  {primaryBadge.label}
                </div>
              );
            })}
          </div>
        </div>

        {/* Sort Toggle */}
        <div className="flex items-center justify-end gap-2 mb-4">
          <div className="inline-flex bg-gray-100 rounded-lg p-1">
            <button
              onClick={() => setSortBy('popular')}
              className={`px-3 py-1.5 text-xs font-medium rounded-md transition-all ${
                sortBy === 'popular'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              Ïù∏Í∏∞Ïàú
            </button>
            <button
              onClick={() => setSortBy('recent')}
              className={`px-3 py-1.5 text-xs font-medium rounded-md transition-all ${
                sortBy === 'recent'
                  ? 'bg-white text-gray-900 shadow-sm'
                  : 'text-gray-600 hover:text-gray-900'
              }`}
            >
              ÏµúÏã†Ïàú
            </button>
          </div>
        </div>

        {/* All Answers (Free) */}
        <div className="space-y-4">
          {othersAnswers.map((answer) => (
            <div
              key={answer.id}
              className="bg-white rounded-2xl p-6 shadow-md border border-gray-200"
            >
              <div className="flex items-center gap-3 mb-4">
                <div className="w-10 h-10 bg-gradient-to-br from-indigo-400 to-purple-500 rounded-full flex items-center justify-center text-white font-bold text-sm">
                  {answer.author.nickname[0]}
                </div>
                <div className="flex-1">
                  <div className="flex items-center gap-2 flex-wrap">
                    <span className="font-medium text-gray-900 text-sm">
                      {answer.author.nickname}
                    </span>
                    {answer.author.badges.map((badge, idx) => (
                      <span
                        key={idx}
                        className={`px-2 py-0.5 text-xs rounded-full font-medium flex items-center gap-1 ${
                          badge.color === 'blue'
                            ? 'bg-blue-100 text-blue-700'
                            : badge.color === 'purple'
                            ? 'bg-purple-100 text-purple-700'
                            : badge.color === 'green'
                            ? 'bg-green-100 text-green-700'
                            : badge.color === 'orange'
                            ? 'bg-orange-100 text-orange-700'
                            : 'bg-gray-100 text-gray-600'
                        }`}
                      >
                        {badge.verified && <span className="text-blue-600">‚úì</span>}
                        {badge.label}
                      </span>
                    ))}
                  </div>
                  <div className="text-xs text-gray-500">{answer.timeAgo}</div>
                </div>
              </div>

              <p className="text-sm text-gray-700 leading-relaxed whitespace-pre-line mb-4">
                {answer.content}
              </p>

              <button
                onClick={() => toggleLike(answer.id)}
                className={`flex items-center gap-1 text-sm transition-colors ${
                  likedAnswers.includes(answer.id)
                    ? 'text-pink-600 font-medium'
                    : 'text-gray-400 hover:text-pink-600'
                }`}
              >
                <span className="text-lg">
                  {likedAnswers.includes(answer.id) ? '‚ù§Ô∏è' : 'ü§ç'}
                </span>
                <span>
                  {answer.likes + (likedAnswers.includes(answer.id) ? 1 : 0)}
                </span>
              </button>
            </div>
          ))}
        </div>

        {/* Encourage Answer Writing (Optional) */}
        {!showMyAnswer && (
          <div className="bg-gradient-to-r from-indigo-50 to-purple-50 rounded-2xl p-6 shadow-md border-2 border-indigo-300">
            <div className="flex items-start gap-3 mb-4">
              <span className="text-3xl">‚úçÔ∏è</span>
              <div className="flex-1">
                <div className="font-bold text-gray-900 mb-2">
                  ÎãπÏã†Ïùò ÏÉùÍ∞ÅÎèÑ Í≥µÏú†Ìï¥Ï£ºÏÑ∏Ïöî
                </div>
                <p className="text-sm text-gray-700 mb-3">
                  ÎãµÎ≥ÄÏùÑ Í≥µÏú†ÌïòÎ©¥ <strong className="text-indigo-700">+10 Ïù∏ÏÇ¨Ïù¥Ìä∏ üíé</strong>Î•º Î∞õÍ≥†,
                  Îã§Î•∏ ÏÇ¨ÎûåÎì§ÏóêÍ≤åÎèÑ ÎèÑÏõÄÏùÑ Ï§Ñ Ïàò ÏûàÏñ¥Ïöî
                </p>
                <button
                  onClick={() => setShowMyAnswer(true)}
                  className="px-4 py-2 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-lg text-sm font-medium hover:shadow-lg transition-all"
                >
                  ÎãµÎ≥Ä ÏûëÏÑ±ÌïòÍ∏∞
                </button>
              </div>
            </div>
          </div>
        )}

        {/* My Answer Section */}
        {showMyAnswer && !shared && (
          <div className="bg-white rounded-2xl p-6 shadow-md border-2 border-indigo-300">
            <label className="block mb-3">
              <span className="font-semibold text-gray-900">ÎÇ¥ ÎãµÎ≥Ä</span>
            </label>
            <textarea
              value={myAnswer}
              onChange={(e) => setMyAnswer(e.target.value)}
              placeholder="ÏûêÏú†Î°≠Í≤å ÏûëÏÑ±Ìï¥Î≥¥ÏÑ∏Ïöî. ÏôÑÎ≤ΩÌï† ÌïÑÏöî ÏóÜÏñ¥Ïöî!"
              className="w-full px-4 py-3 border border-gray-200 rounded-xl focus:border-indigo-500 focus:outline-none resize-none"
              rows={8}
            />
            <div className="flex gap-3 mt-4">
              <button
                onClick={() => setShowMyAnswer(false)}
                className="flex-1 py-3 bg-gray-200 text-gray-700 rounded-xl font-semibold hover:bg-gray-300 transition-all"
              >
                Ï∑®ÏÜå
              </button>
              <button
                onClick={handleShare}
                disabled={!myAnswer.trim()}
                className="flex-1 py-3 bg-gradient-to-r from-indigo-600 to-purple-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
              >
                Í≥µÏú†ÌïòÍ∏∞
              </button>
            </div>
          </div>
        )}

        {shared && (
          <div className="bg-emerald-100 rounded-2xl p-5 shadow-sm border border-emerald-400 text-center">
            <div className="text-3xl mb-2">‚úÖ</div>
            <div className="font-semibold text-gray-900 mb-1">
              Í≥µÏú† ÏôÑÎ£å!
            </div>
            <div className="text-sm text-emerald-700">
              +10 Ïù∏ÏÇ¨Ïù¥Ìä∏Î•º Î∞õÏïòÏñ¥Ïöî üíé
            </div>
          </div>
        )}

        {/* Navigation Buttons */}
        <div className="flex gap-3">
          {prevId && (
            <button
              onClick={handlePrev}
              className="flex-1 py-4 bg-white text-gray-700 border-2 border-gray-300 rounded-xl font-semibold hover:border-emerald-400 hover:bg-gray-50 transition-all"
            >
              ‚Üê Ïù¥Ï†Ñ ÏßàÎ¨∏
            </button>
          )}
          <button
            onClick={handleNext}
            className={`${prevId ? 'flex-1' : 'w-full'} py-4 bg-gradient-to-r from-emerald-500 to-teal-600 text-white rounded-xl font-semibold hover:shadow-lg transition-all`}
          >
            {nextId ? 'Îã§Ïùå ÏßàÎ¨∏ ‚Üí' : 'ÏôÑÎ£åÌïòÍ≥† ÎèåÏïÑÍ∞ÄÍ∏∞'}
          </button>
        </div>
    </div>
  );
}
